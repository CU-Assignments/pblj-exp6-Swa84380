import java.util.*;
import java.util.stream.Collectors;

class Product {
    private String name;
    private String category;
    private double price;

    public Product(String name, String category, double price) {
        this.name = name;
        this.category = category;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public String getCategory() {
        return category;
    }

    public double getPrice() {
        return price;
    }

    @Override
    public String toString() {
        return name + " (" + category + "): $" + price;
    }
}

public class ProductProcessor {

    public static void main(String[] args) {
        // Sample dataset of products
        List<Product> products = Arrays.asList(
                new Product("Laptop", "Electronics", 1200),
                new Product("Smartphone", "Electronics", 800),
                new Product("Washing Machine", "Home Appliances", 500),
                new Product("Refrigerator", "Home Appliances", 900),
                new Product("Sofa", "Furniture", 300),
                new Product("Table", "Furniture", 150),
                new Product("Headphones", "Electronics", 150)
        );

        // Grouping products by category
        Map<String, List<Product>> productsByCategory = products.stream()
                .collect(Collectors.groupingBy(Product::getCategory));

        // Displaying products grouped by category
        System.out.println("Products grouped by category:");
        productsByCategory.forEach((category, productList) -> {
            System.out.println(category + ":");
            productList.forEach(System.out::println);
        });

        // Finding the most expensive product in each category
        Map<String, Optional<Product>> mostExpensiveProductInCategory = products.stream()
                .collect(Collectors.groupingBy(Product::getCategory,
                        Collectors.maxBy(Comparator.comparingDouble(Product::getPrice))));

        // Displaying the most expensive product in each category
        System.out.println("\nMost expensive product in each category:");
        mostExpensiveProductInCategory.forEach((category, product) ->
                System.out.println(category + ": " + product.orElse(null)));

        // Calculating the average price of all products
        double averagePrice = products.stream()
                .collect(Collectors.averagingDouble(Product::getPrice));

        // Displaying the average price
        System.out.println("\nAverage price of all products: $" + averagePrice);
    }
}
